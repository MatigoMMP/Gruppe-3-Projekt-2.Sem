@page "/listjobs"
@using festivalsql.Shared.Models;
@inject HttpClient Http

<div class="listjobs_container">
    <div class="listjobs_header">
        <div class="listjobs_list">
            <h1>Liste over opgaver</h1>

            @if (jobs == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Detail</th>
                        <th>Place</th>
                        <th>Status</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var job in jobs)
                    {
                    <tr>
                        <td>@job.opgavedetalje_id</td>
                        <td>@job.placering_id</td>
                        <td>@job.status_id</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="@(() => GetJob(@job.opgave_id))">Edit</button>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="@(() => DeleteJob(@job.opgave_id))">Delete</button>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        }
        </div>
        <div class="listjobs_detail">
            <h1 listjobs_h1>Job Details</h1>

            @if (jobDetails == null)
            {
            <p><em>Loading...</em></p>
            }
            else
            {
            <table>
                <thead>
                    <tr>
                        <th>ID |</th>
                        <th>Detail</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var jobDetail in jobDetails)
                        {
                    <tr>
                        <td>@jobDetail.opgavedetalje_id</td>
                        <td>@jobDetail.navn</td>
                    </tr>
                        }
                </tbody>
            </table>

            <br />

            <table>
                <thead>
                    <tr>
                        <th>ID |</th>
                        <th>Place</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var place in places)
                        {
                    <tr>
                        <td>@place.placering_id</td>
                        <td>@place.navn</td>
                    </tr>
                        }
                </tbody>
            </table>

            <br />

            <table>
                <thead>
                    <tr>
                        <th>ID |</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var status in statuses)
                        {
                    <tr>
                        <td>@status.status_id</td>
                        <td>@status.navn</td>
                    </tr>
                        }
                </tbody>
            </table>
            }
        </div>
    </div>

    <div class="listjobs_submit">
        <h4>Opret opgave</h4>

        <form>
            <div class="form-group">
                <label>Detail</label>
                <input class="form-control col-sm-3" @bind="newJob.opgavedetalje_id" />
            </div>
            <div class="form-group">
                <label>Place</label>
                <input class="form-control col-sm-3" @bind="newJob.placering_id" />
            </div>
            <div class="form-group">
                <label>Status</label>
                <input class="form-control col-sm-3" @bind="newJob.status_id" />
            </div>
            <button class="btn btn-primary" @onclick="SubmitJob">Submit</button>
        </form>
    </div>
</div>

    @code {

        @* Liste af jobs *@
        private List<Job> jobs;

        private Job newJob = new Job();

        private bool edit = false;

        protected override async Task OnInitializedAsync()
        {
            jobs = await Http.GetFromJsonAsync<List<Job>>("api/job");

            jobDetails = await Http.GetFromJsonAsync<List<JobDetail>>("api/jobdetail");

            places = await Http.GetFromJsonAsync<List<Place>>("api/jobplace");

            statuses = await Http.GetFromJsonAsync<List<Status>>("api/jobstatus");
        }

        private async Task GetJob(int id)
        {
            newJob = await Http.GetFromJsonAsync<Job>("api/job/detail/" + id);
            edit = true;
        }

        private async Task SubmitJob()
        {
            if (edit == false)
            {
                await Http.PostAsJsonAsync<Job>("api/job/create", newJob);
                await OnInitializedAsync();
            }
            else
            {
                await Http.PutAsJsonAsync<Job>("api/job/edit", newJob);
                edit = false;
                await OnInitializedAsync();
            }
        }

        private async Task DeleteJob(int id)
        {
            await Http.DeleteAsync("api/job/delete" + id);
            await OnInitializedAsync();
        }

        @* Liste af job detaljer *@

        private List<JobDetail> jobDetails;

        private List<Place> places;

        private List<Status> statuses;

    }
